angular.module('Constants', [])
    .constant('SERVER', {
        API: '/wordpress/wp-json',
    });

'use strict';

angular.module('App', [
        'App.home',
        'App.atelier',
        'App.savoirfaire',
        'App.galerie',
        'App.formation',
        'App.contact',
        'App.mobile',

        'ui.router',
        'ngAnimate',
        'ngSanitize',

        'directives.menu',
        'directives.bindScreenWidth',

        'animations.app',

        'services.Api'
    ])
    .config(function($locationProvider, $urlRouterProvider) {

        $locationProvider.html5Mode(false);
        $urlRouterProvider.otherwise('/');

    })
    .controller('AppCtrl', function($scope, $rootScope, $state, $timeout, Api) {
        var app = this;

        app.state = $state;
        app.language = 'fr';
        app.sectionAnimationType = 'animForward';
        app.minWidth = 960;

        $timeout(function(){
            app.loaded = true;
        }, 2200);

        Api.getAll();

        app.changeLanguage = function(language){
            if(app.language === language) return;

            app.language = language;
            Api.setLanguage(language);
            Api.getAll(true)
                .then(function(data){
                    $rootScope.$emit('APP_LANGUAGE_CHANGE', language);
                });
        };

        app.stopEventPropagation = function(e){
            e.stopPropagation();
        };

        var tabArray = [
            'home',
            'atelier',
            'savoirfaire',
            'galerie',
            'formation',
            'contact'
        ];

        app.go = function(nextStateName, params){

            var currentTab = tabArray.filter(function(tab){
                return $state.includes(tab);
            })[0];

            var nextTab = tabArray.filter(function(tab){
                return tab === nextStateName;
            })[0];

            if(
                currentTab &&
                nextTab &&
                tabArray.indexOf(currentTab) < tabArray.indexOf(nextTab)
            ){

                app.sectionAnimationType = 'animForward';

            }else{

                app.sectionAnimationType = 'animBackward';
            }

            $timeout(function(){
                $state.go(nextStateName, params);
            }, 50);
        };

    });

(function() {
    var _animDuration = .4,
        _staggerDuration = .1,
        nextDelay = 0;

    angular.module('animations.app', [])
    .animation('.Loader', function(){
        return {
            leave: function(element, done){
                TweenMax.to(element, .8, {
                    opacity: 0,
                    onComplete: function() {
                        element.css('display', 'none');
                        done();
                    }
                });
            }
        };
    })
    .animation('.animForward', function($rootScope) {

        return {
            enter: function(element, done) {

                var staggers = element[0].querySelectorAll('.stagger'),
                    background = element[0].querySelector('.background'),
                    container = element[0].querySelector('.container');

                if(!container) {
                    done();
                    return;
                }

                var tl = new TimelineMax({paused: true});

                tl
                    .from(element, _animDuration, {
                        opacity: 0,
                        delay: nextDelay,
                        ease: Power2.easeOut
                    })
                    .staggerFrom(staggers, .7, {
                        x: 50,
                        opacity: 0,
                        ease: Power2.easeOut,
                    }, _staggerDuration);

                if(background){
                    tl.from(background, 3, {
                        opacity: 0,
                        scale: 1.05,
                        ease: Ease.easeOut
                    });
                }

                tl.restart();

                nextDelay = .1 + _animDuration + (_staggerDuration / 2) * (staggers.length - 1);
                done();
            },

            leave: function(element, done) {
                var staggers = element[0].querySelectorAll('.stagger'),
                    background = element[0].querySelector('.background');

                var tl = new TimelineMax({paused: true, onComplete: done});

                if(background){
                    tl.to(background, _animDuration, {
                        scale: 1.05,
                        opacity: 0,
                        ease: Power2.easeIn
                    });
                }

                tl
                    .staggerTo(staggers, .3, {
                        x: -50,
                        opacity: 0,
                        ease: Back.easeIn,
                        easeParams: [3]
                    }, (_staggerDuration / 2) )
                    .to(element, _animDuration, {
                        opacity: 0,
                        ease: Power2.easeIn
                    });

                tl.restart();
            }
        };
    })
    .animation('.animBackward', function($rootScope) {

        return {
            enter: function(element, done) {

                var staggers = element[0].querySelectorAll('.stagger'),
                    background = element[0].querySelector('.background'),
                    container = element[0].querySelector('.container');

                if(!container) {
                    done();
                    return;
                }

                var tl = new TimelineMax({paused: true});

                tl
                    .from(element, _animDuration, {
                        opacity: 0,
                        delay: nextDelay,
                        ease: Power2.easeOut
                    })
                    .staggerFrom(staggers, .7, {
                        x: -50,
                        opacity: 0,
                        ease: Power2.easeOut,
                    }, _staggerDuration);

                if(background){
                    tl.from(background, 3, {
                        opacity: 0,
                        scale: 1.05,
                        ease: Ease.easeOut
                    });
                }

                tl.restart();

                nextDelay = .1 + _animDuration + (_staggerDuration / 2) * (staggers.length - 1);
                done();
            },

            leave: function(element, done) {
                var staggers = element[0].querySelectorAll('.stagger'),
                    background = element[0].querySelector('.background');

                var tl = new TimelineMax({paused: true, onComplete: done});

                if(background){
                    tl.to(background, _animDuration, {
                        scale: 1.05,
                        opacity: 0,
                        ease: Power2.easeIn
                    });
                }

                tl
                    .staggerTo(staggers, .3, {
                        x: 50,
                        opacity: 0,
                        ease: Back.easeIn,
                        easeParams: [3]
                    }, (_staggerDuration / 2) )
                    .to(element, _animDuration, {
                        opacity: 0,
                        ease: Power2.easeIn
                    });

                tl.restart();
            }
        };
    })

    .animation('.sideView', function(){

        return {

            enter: function(element, done) {

                var container = element[0].querySelector('.container');

                if(!container) return;

                TweenMax.set(container, {
                    x: '100%'
                });

                TweenMax.to(container, .8, {
                    x: '0%',
                    ease: Power2.easeOut,
                    onComplete: done
                });

            },

            leave: function(element, done) {
                var container = element[0].querySelector('.container');

                if(!container) return;

                TweenMax.to(container, .8, {
                    x: '100%',
                    ease: Power2.easeOut,
                    onComplete: done
                });

            }
        };
    })
})();

angular.module('animations.atelier', [])
    .animation('.center', function($rootScope) {

        var direction,
            duration = .4,
            stagger = .1,
            translateY = 30;

        $rootScope.$on('TIMELINE_SCROLL_DOWN', function(){
            direction = 'down';
        });

        $rootScope.$on('TIMELINE_SCROLL_UP', function(){
            direction = 'up';
        });

        return {
            enter: function(element, done) {

                var elements = element[0].querySelectorAll('.stagger');
                var y = direction === 'down' ? translateY : -translateY;
                var staggerDuration = direction === 'down' ? stagger : -stagger;
                var delay = .2 + duration + stagger * (elements.length - 1);

                TweenMax.staggerFrom(elements, duration, {
                    y: y,
                    opacity: 0,
                    ease: Back.easeOut,
                    easeParams: [3],
                    delay: delay,
                }, staggerDuration, done);
            },

            leave: function(element, done) {

                var elements = element[0].querySelectorAll('.stagger');
                var y = direction === 'down' ? -translateY : translateY
                var staggerDuration = direction === 'down' ? stagger : -stagger;

                TweenMax.staggerTo(elements, duration/2, {
                    y: y,
                    opacity: 0,
                    delay: .1,
                    ease: Power1.easeIn
                }, staggerDuration, done);
            }
        };
    })
    .animation('.Infos', function(){

        var prevDate = 1980;

        return {

            enter: function(element, done) {

                element[0].querySelector('.Infos-trait').classList.add('hidden');
                element[0].querySelector('.Infos-lieu').classList.add('hidden');

                var onCountStop = function(){
                    setTimeout(function(){
                        element[0].querySelector('.Infos-trait').classList.remove('hidden');
                        setTimeout(function(){
                            element[0].querySelector('.Infos-lieu').classList.remove('hidden');
                        }, 350);
                    }, 750);
                    done();
                };

                var dateUp = new countUp(
                    element[0].querySelector('.Infos-date'),
                    prevDate,
                    element.scope().section.date,
                    0,
                    2.1,
                    {
                        separator: false
                    }
                );

                dateUp.start(onCountStop);

                prevDate = element.scope().section.date;
            },

            leave: function(element, done) {
                element[0].querySelector('.Infos-trait').classList.add('hidden');
                element[0].querySelector('.Infos-lieu').classList.add('hidden');
                done();
            }
        };
    });

'use strict';

angular.module('App.atelier', [
        'ui.router',
        'ngAnimate',

        'App.atelier.clients',

        'animations.atelier',

        'directives.timeline',
        'directives.onWheel',
        'directives.fullFrame',
        'directives.textClip',
        'directives.zigouigoui',

        'services.Api',

        'filters.index'
    ])
    .config(function($stateProvider) {

        $stateProvider
            .state('atelier', {
                url: '/atelier',
                views: {
                    'main': {
                        resolve: {
                            histoire: function(Api){
                                return Api.getHistoire();
                            }
                        },
                        templateUrl: 'app/atelier/atelier.html',
                        controller: 'AtelierCtrl',
                        controllerAs: 'atlr'
                    }
                }
            });
    })
    .controller('AtelierCtrl', function($scope, $rootScope, $state, Api, histoire) {

        var atlr = this;

        function computeData(histoire){
            atlr.history = histoire.sort(function(a, b){
                return a.date - b.date;
            });
        }

        atlr.current = 0;

        computeData(histoire);

        atlr.isAnimate = false;
        atlr.transitionDuration = 1000;

        atlr.changeCurrent = function(direction){
            if(!atlr.isAnimate &&  $state.current.name === 'atelier'){
                atlr.isAnimate = true;

                setTimeout(function(){
                    atlr.isAnimate = false
                }, atlr.transitionDuration);

                if(direction === 'up'){
                    if( atlr.current !== 0 ){
                        $rootScope.$emit('TIMELINE_SCROLL_UP');
                        atlr.current -= 1;
                    }
                }else if(direction === 'down'){
                    if( atlr.current !== atlr.history.length - 1 ){
                        $rootScope.$emit('TIMELINE_SCROLL_DOWN');
                        atlr.current += 1;
                    }
                }
            }
        };

        atlr.up = function(){
            atlr.changeCurrent('up');
        };

        atlr.down = function(){
            atlr.changeCurrent('down');
        };

        atlr.getColor = function(){
            if(atlr.current === 0 || atlr.current === 2 ||atlr.current === 4){
                // beige theme
                return '#515151';
            }

            else if(atlr.current === 3 || atlr.current === 5){
                // saumon theme
                return '#e6dcd1';
            }

            else if(atlr.current === 1){
                // dark theme
                return '#e6dcd1';
            }
        }


        $rootScope.$on('APP_LANGUAGE_CHANGE', function() {
            Api.getHistoire().then(computeData);
        });
    });

(function() {
    var _animDuration = .4;

    angular.module('animations.formation', [])
        .animation('.formationView', function($rootScope) {

            return {
                enter: function(element, done) {

                    var container = element[0].querySelector('.container'),
                        image = element[0].querySelector('.Image'),
                        details = element[0].querySelector('.Details');

                    if (!container) return;

                    TweenMax.set(container, {
                        x: '100%'
                    });

                    TweenMax.set(details, {
                        height: '100%',
                        zIndex: 1
                    });


                    var tl = new TimelineLite();

                    tl
                        .to(container, _animDuration, {
                            x: '0%',
                            ease: Power2.easeOut
                        })
                        .to(details, _animDuration, {
                            height: '50%',
                            ease: Power2.easeOut,
                            onComplete: done
                        });
                },

                leave: function(element, done) {
                    var container = element[0].querySelector('.container');
                    if (!container) return;
                    TweenMax.to(container, _animDuration, {
                        x: '100%',
                        ease: Power2.easeOut,
                        onComplete: done
                    });
                }
            };
        })
        .animation('.conferenceView', function($rootScope) {

            return {
                enter: function(element, done) {
                    var container = element[0].querySelector('.container'),
                        image = element[0].querySelector('.Image'),
                        details = element[0].querySelector('.Details');

                    if (!container) return;

                    TweenMax.set(container, {
                        x: '-100%'
                    });

                    TweenMax.set(details, {
                        height: '100%'
                    });


                    var tl = new TimelineLite();

                    tl
                        .to(container, _animDuration, {
                            x: '0%',
                            ease: Power2.easeOut
                        })
                        .to(details, _animDuration, {
                            height: '50%',
                            ease: Power2.easeOut,
                            onComplete: done
                        });
                },

                leave: function(element, done) {
                    var container = element[0].querySelector('.container');
                    if (!container) return;
                    TweenMax.to(container, _animDuration, {
                        x: '-100%',
                        ease: Power2.easeOut,
                        onComplete: done
                    });
                }
            };
        });
})();

'use strict';

angular.module('App.formation', [
        'ui.router',

        'App.formation.opened',

        'directives.fullFrame',
        'services.Api',
        'animations.formation'
    ])
    .config(function($stateProvider) {

        $stateProvider
            .state('formation', {
                url: '/transmission-du-savoir',
                views: {
                    'main': {
                        resolve: {
                            conferences: function(Api){
                                return Api.getConferences();
                            },
                            formations: function(Api){
                                return Api.getFormations();
                            },
                        },
                        templateUrl: 'app/formation/formation.html',
                        controller: 'FormationCtrl',
                        controllerAs: 'fc'
                    }
                }
            });
    })
    .controller('FormationCtrl', function($scope, $rootScope, $state,  Api, conferences, formations) {

        var fc = this;

        fc.conferences = conferences;
        fc.formations = formations;

        fc.detailsOpen = ($state.current.name !== 'formation');

        $rootScope.$on('$stateChangeSuccess', function(e, state){
            fc.detailsOpen = (state.name !== 'formation');
        });

        $rootScope.$on('APP_LANGUAGE_CHANGE', function(){

            fc.headerTitle = (Api.getLanguage() === 'fr') ? 'Transmettre un savoir-faire à l\'international' : '';

            Api.getConferences().then(function(conferences){
                fc.conferences = conferences;
            });
            Api.getFormations().then(function(formations){
                fc.formations = formations;
            });
        });
    });

'use strict';
angular.module('animations.galerie', [])
    .animation('.singleView', function($rootScope) {

        return {
            enter: function(element, done) {
                TweenMax.from(element, .3, {
                    opacity: 0,
                    ease: Power2.easeOut,
                    onComplete: done
                });
            },

            leave: function(element, done) {
                TweenMax.to(element, .3, {
                    opacity: 0,
                    ease: Power2.easeOut,
                    onComplete: done
                });
            }
        };
    })

'use strict';

angular.module('App.galerie', [
        'ui.router',
        'ngAnimate',

        'App.galerie.single',

        'directives.timeline',
        'directives.onWheel',
        'directives.fullFrame',
        'directives.gallery',

        'filters.slice',

        'animations.galerie'
    ])
    .config(function($stateProvider) {

        $stateProvider
            .state('galerie', {
                url: '/realisations',
                views: {
                    'main': {
                        resolve: {
                            realisations: function(Api){
                                return Api.getRealisations();
                            }
                        },
                        templateUrl: 'app/galerie/galerie.html',
                        controller: 'GalerieCtrl',
                        controllerAs: 'glr'
                    }
                }
            });
    })
    .controller('GalerieCtrl', function($scope, $rootScope, $state, $timeout, Api, realisations) {

        var glr = this;

        glr.posts = [];

        $rootScope.$on('APP_LANGUAGE_CHANGE', function(){
            Api.getRealisations().then(function(realisations){
                $rootScope.$emit('GALLERY_RESTART');
                glr.posts = realisations;
            });
        });

        $timeout(function(){
            glr.posts = realisations;
            glr.nbTabs = Math.ceil(glr.posts.length / glr.config.postsPerPage);
        }, 700 + document.querySelectorAll('.stagger').length * 100);

        glr.config = {
            nbCol: 3,
            margin: 15,
            width: 300,
            postsPerPage: 6
        };

        glr.current = 0;

        glr.isThumbnailsOpen = $state.current.name === 'galerie';

        glr.direction = 'down';
        glr.isAnimate = false;
        glr.transitionDuration = 1000;

        glr.changeCurrent = function(direction){
            if(!glr.isAnimate && glr.isThumbnailsOpen){
                glr.isAnimate = true;

                setTimeout(function(){
                    glr.isAnimate = false
                }, glr.transitionDuration);

                if(direction === 'up'){
                    if( glr.current !== 0 ){
                        $rootScope.$emit('GALLERY_RESTART');
                        $rootScope.$emit('TIMELINE_SCROLL_UP');
                        glr.current -= 1;
                    }
                }else if(direction === 'down'){
                    if( glr.current !== glr.nbTabs - 1){
                        $rootScope.$emit('GALLERY_RESTART');
                        $rootScope.$emit('TIMELINE_SCROLL_DOWN');
                        glr.current += 1;
                    }
                }
            }
        };

        glr.up = function(){
            glr.direction = 'up';
            $timeout(function () {
                glr.changeCurrent('up');
            }, 50);
        };

        glr.down = function(){
            glr.direction = 'down';
            $timeout(function () {
                glr.changeCurrent('down');
            }, 50);
        };



        angular.element(window).on('resize', function(){
            var nbCol = (window.innerWidth > 1000) ? 3 : ((window.innerWidth > 700) ? 2 : 1);
            if (glr.config.nbCol !== nbCol)
                glr.config.nbCol = nbCol;
        });

    });

'use strict';

angular.module('App.contact', [
        'App.contact.membre',
        'ui.router'
    ])
    .config(function($stateProvider) {

        $stateProvider
            .state('contact', {
                url: '/contact',
                views: {
                    'main': {
                        templateUrl: 'app/contact/contact.html',
                        controller: 'ContactCtrl',
                        controllerAs: 'contact'
                    }
                }
            });
    })
    .controller('ContactCtrl', function($scope) {

    });

(function(){
    var _isAnim = true;

    'use strict';

    angular.module('App.home', [
            'ui.router'
        ])
        .config(function($stateProvider) {

            $stateProvider
                .state('home', {
                    url: '/',
                    views: {
                        'main': {
                            templateUrl: 'app/home/home.html',
                            controller: 'HomeCtrl',
                            controllerAs: 'home'
                        }
                    }
                });
        })
        .controller('HomeCtrl', function($scope) {

            if(!_isAnim){
                $scope.animation = {
                    logo: false,
                    center: true
                };
            }
            else{
                $scope.animation = {
                    logo: false,
                    center: false
                };
            }


        })
        .animation('.Logo', function(){

            var y = 30,
                staggerDuration = .1;

            return {
                enter: function(element, done){
                    var title = element[0].querySelector('.Logo-title'),
                        tl = new TimelineMax({paused: true});
                        // baseline = element[0].querySelector('.Logo-baseline'),


                    tl
                        .from(title, .7, {
                            y: -y,
                            opacity: 0,
                            ease: Power2.easeOut,
                            easeParams: [3]
                        })

                    tl.restart();
                },

                leave: function(element, done){
                    var title = element[0].querySelector('.Logo-title');
                        // baseline = element[0].querySelector('.Logo-baseline');

                    TweenMax.to(title, .7, {
                        y: y,
                        opacity: 0,
                        ease: Back.easeOut,
                        easeParams: [5]
                    });
                }
            };
        })
        .directive('animationHome', function($rootScope){

            return {

                restrict: 'A',

                link: function(scope, element, attrs){

                    if(!_isAnim) return;
                    _isAnim = false;

                    var background = element[0].querySelector('.background');

                    TweenMax.set(background, {opacity: 1});

                    setTimeout(function () {

                        TweenMax.to(background, .5, {
                            opacity: .3
                        });

                        scope.$apply(function(){
                            scope.animation.logo = true;
                        });

                        setTimeout(function () {
                            scope.$apply(function(){
                                scope.animation.logo = false;
                                scope.animation.center = true;
                            });
                        }, 4000);
                    }, 4800);

                }
            }
        });

})();

angular.module('App.mobile', [])
    .controller('MobileCtrl', function($scope, $rootScope, Api) {

        $scope.savoirs = [];

        Api.getSavoirFaire()
            .then(function(savoirs){
                $scope.savoirs = savoirs;
            });

        Api.getHistoire()
            .then(function(histoire){
                $scope.introduction = histoire[0].content;
            });
    });

(function() {
    var _animDuration = .4;

    angular.module('animations.savoirFaire', [])
        .animation('.halfRight', function($rootScope) {

            return {
                enter: function(element, done) {
                    var container = element[0].querySelector('.container'),
                        picture = element[0].querySelector('.Picture'),
                        details = element[0].querySelector('.Details');

                    if (!container) return;

                    var tl = new TimelineLite();


                    TweenMax.set(details, {
                        minHeight: '100%',
                        top: '0%'
                    });

                    TweenMax.set(picture.querySelector('img'), {
                        opacity: 0
                    });

                    tl
                        .from(container, _animDuration, {
                            x: '100%',
                            ease: Power2.easeOut
                        })
                        .to(details, _animDuration, {
                            top: '50%',
                            minHeight: '50%',
                            ease: Power2.easeOut,
                            onComplete: done
                        });

                    element[0].querySelector('.Picture img').addEventListener('load', function(){
                        TweenMax.to(this, _animDuration, {
                            opacity: 1
                        });
                    });
                },

                leave: function(element, done) {
                    var container = element[0].querySelector('.container');
                    if (!container) return;
                    TweenMax.to(container, _animDuration, {
                        x: '100%',
                        ease: Power2.easeOut,
                        onComplete: done
                    });
                }
            };
        })
        .animation('.halfLeft', function($rootScope) {

            return {
                enter: function(element, done) {
                    var container = element[0].querySelector('.container'),
                        picture = element[0].querySelector('.Picture'),
                        details = element[0].querySelector('.Details');

                    if (!container) return;

                    var tl = new TimelineLite();

                    TweenMax.set(details, {
                        minHeight: '100%',
                        top: '0%'
                    });

                    TweenMax.set(picture.querySelector('img'), {
                        opacity: 0
                    });

                    tl
                        .from(container, _animDuration, {
                            x: '-100%',
                            ease: Power2.easeOut
                        })
                        .to(details, _animDuration, {
                            top: '50%',
                            minHeight: '50%',
                            ease: Power2.easeOut,
                            onComplete: done
                        });

                    element[0].querySelector('.Picture img').addEventListener('load', function(){
                        TweenMax.to(this, _animDuration, {
                            opacity: 1
                        });
                    });
                },

                leave: function(element, done) {
                    var container = element[0].querySelector('.container');
                    if (!container) return;
                    TweenMax.to(container, _animDuration, {
                        x: '-100%',
                        ease: Power2.easeOut,
                        onComplete: done
                    });
                }
            };
        });
})();

'use strict';

angular.module('App.savoirfaire', [
        'ui.router',
        'App.savoirfaire.savoir',
        'directives.fullFrame',
        'animations.savoirFaire'
    ])
    .config(function($stateProvider) {

        $stateProvider
            .state('savoirfaire', {
                url: '/savoir-faire',
                views: {
                    'main': {
                        resolve: {
                            savoirs: function(Api) {
                                return Api.getSavoirFaire();
                            }
                        },
                        templateUrl: 'app/savoirfaire/savoirfaire.html',
                        controller: 'SfCtrl',
                        controllerAs: 'sf'
                    }
                }
            });
    })
    .controller('SfCtrl', function($scope, $rootScope, $state, $timeout, Api, savoirs) {

        var sf = this;

        function computeData(savoirs){
            sf.savoirs = savoirs;

            sf.savoirsLeft = savoirs.filter(function(savoir) {
                return savoir.column === 'gauche';
            });

            sf.savoirsRight = savoirs.filter(function(savoir) {
                return savoir.column === 'droite';
            });
        }

        computeData(savoirs);


        sf.detailsOpen = $state.current.name !== 'savoirfaire';
        // sf.animClass = 'halfLeft';


        sf.openLeft = function(slug) {
            sf.detailsOpen = true;
            sf.animClass = 'halfLeft';
            $state.go('savoirfaire.savoir', {
                slug: slug
            });
        };

        sf.openRight = function(slug) {
            sf.detailsOpen = true;
            sf.animClass = 'halfRight';
            $state.go('savoirfaire.savoir', {
                slug: slug
            });
        };


        $rootScope.$on('APP_LANGUAGE_CHANGE', function() {
            Api.getSavoirFaire().then(computeData);
        });

        $rootScope.$on('$stateChangeSuccess', function($event, nextState) {
            if (nextState.name === 'savoirfaire' && sf.detailsOpen) {
                $timeout(function() {
                    sf.detailsOpen = false;
                }, 200);
            }
        });
    });

'use strict';

angular.module('App.atelier.clients', [
        'ui.router',
    ])
    .config(function($stateProvider) {

        $stateProvider
            .state('atelier.clients', {
                url: '/clients',
                views: {
                    'clients': {
                        resolve: {
                            clients: function(Api){
                                return Api.getClients();
                            }
                        },
                        templateUrl: 'app/atelier/clients/clients.html',
                        controller: 'ClientsCtrl',
                        controllerAs: 'clts'
                    }
                }
            });
    })
    .controller('ClientsCtrl', function($scope, $rootScope, Api, clients) {

        var clts = this;

        function computeData(clients){
            clts.clientsDorure = clients.filter(function(client){
                return client.category === 'La dorure';
            });

            clts.clientsFormation = clients.filter(function(client){
                return client.category === 'La formation';
            });
        }

        computeData(clients);


        $rootScope.$on('APP_LANGUAGE_CHANGE', function() {
            Api.getClients(true).then(computeData);
        });
    });

'use strict';

angular.module('App.formation.opened', [
        'ui.router',
        'services.Api'
    ])
    .config(function($stateProvider) {

        $stateProvider
            .state('formation.openedFormation', {
                url: '/formation/:slug',
                views: {
                    'formation': {
                        resolve: {
                            data: function(Api){
                                return Api.getFormations();
                            },
                            type: function(){
                                return 'formation';
                            }
                        },
                        templateUrl: 'app/formation/opened/opened.html',
                        controller: 'OpenedCtrl',
                        controllerAs: 'op'
                    }
                }
            })
            .state('formation.openedConference', {
                url: '/conference/:slug',
                views: {
                    'conference': {
                        resolve: {
                            data: function(Api){
                                return Api.getConferences();
                            },
                            type: function(){
                                return 'conference';
                            }
                        },
                        templateUrl: 'app/formation/opened/opened.html',
                        controller: 'OpenedCtrl'
                    }
                }
            });
    })
    .controller('OpenedCtrl', function($scope, $rootScope, $stateParams, Api, data, type) {

        var post = data.filter(function(d){
            return d.slug === $stateParams.slug;
        });
        $scope.post = post[0];
        $scope.type = type;

        $rootScope.$on('APP_LANGUAGE_CHANGE', function(){
            switch (type) {
                case 'formation':
                    Api.getFormations().then(function(data){
                        var post = data.filter(function(d){
                            return d.slug === $stateParams.slug;
                        });
                        $scope.post = post[0];
                    });
                    break;
                case 'conference':
                    Api.getConferences().then(function(data){
                        var post = data.filter(function(d){
                            return d.slug === $stateParams.slug;
                        });
                        $scope.post = post[0];
                    });
                    break;

            }
        });

    });

'use strict';

angular.module('App.galerie.single', [
        'ui.router',
        'ngAnimate',

        'directives.slider',
        'directives.fullFrame',
        'directives.relativeMaxHeight',

        'filters.index'
    ])
    .config(function($stateProvider) {

        $stateProvider
            .state('galerie.single', {
                url: '/:slug',
                views: {
                    'single': {
                        resolve: {
                            realisations: function(Api){
                                return Api.getRealisations();
                            }
                        },
                        templateUrl: 'app/galerie/single/single.html',
                        controller: 'SingleCtrl',
                        controllerAs: 'sgl'
                    }
                }
            });
    })
    .controller('SingleCtrl', function($scope, $rootScope, $stateParams, Api, realisations) {

        var sgl = this;

        var post = realisations.filter(function(realisation){
            return realisation.slug === $stateParams.slug;
        });

        sgl.post = post[0];

        $rootScope.$on('APP_LANGUAGE_CHANGE', function(){
            Api.getRealisations().then(function(realisations){
                var post = realisations.filter(function(realisation){
                    return realisation.slug === $stateParams.slug;
                });

                sgl.post = post[0];
            });
        });

    });

'use strict';

angular.module('App.contact.membre', [
        'ui.router',
    ])
    .config(function($stateProvider) {

        $stateProvider
            .state('contact.membre', {
                url: '/partenaires',
                views: {
                    'membre': {
                        resolve: {
                            partners: function(Api){
                                return Api.getPartners();
                            }
                        },
                        templateUrl: 'app/contact/membre/membre.html',
                        controller: 'MembreCtrl',
                        controllerAs: 'mb'
                    }
                }
            });
    })
    .controller('MembreCtrl', function($scope, $rootScope, Api, partners) {

        var mb = this;

        mb.partners = partners;

        $rootScope.$on('APP_LANGUAGE_CHANGE', function(){
            Api.getPartners()
                .then(function(partners){
                    mb.partners = partners;
                });
        });

    });

'use strict';

angular.module('App.savoirfaire.savoir', [
        'ui.router',
        'directives.fullFrame',
        'directives.arrows'
    ])
    .config(function($stateProvider) {

        $stateProvider
            .state('savoirfaire.savoir', {
                url: '/:slug',
                views: {
                    'savoir': {
                        resolve: {
                            savoirs: function(Api){
                                return Api.getSavoirFaire();
                            }
                        },
                        templateUrl: 'app/savoirfaire/savoir/savoir.html',
                        controller: 'SavoirCtrl',
                        controllerAs: 's'
                    }
                }
            });
    })
    .controller('SavoirCtrl', function($scope, $rootScope, $stateParams, Api, savoirs) {

        var s = this;

        var savoir = savoirs.filter(function(savoir){
            return savoir.slug === $stateParams.slug;
        });

        s.savoir = savoir[0];

        $rootScope.$on('APP_LANGUAGE_CHANGE', function(){
            Api.getSavoirFaire().then(function(savoirs){
                var savoir = savoirs.filter(function(savoir){
                    return savoir.slug === $stateParams.slug;
                });
                s.savoir = savoir[0];
            });
        });

    });

'use strict';

angular.module('directives.arrows', [])
    .directive('arrowLeft', function() {

        return {

            restrict: 'E',

            template: [

                '<svg version="1.1" id="Calque_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 37.9 50.8" enable-background="new 0 0 37.9 50.8" xml:space="preserve">',
                '    <line fill="none" stroke="#000000" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" x1="26.5" y1="8" x2="9.6" y2="25"/>',
                '    <line fill="none" stroke="#000000" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" x1="26.5" y1="41.9" x2="9.6" y2="25"/>',
                '</svg>'

            ].join('')
        };
    })
    .directive('arrowRight', function() {

        return {

            restrict: 'E',

            template: [

                '<svg version="1.1" id="Calque_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 37.9 50.8" enable-background="new 0 0 37.9 50.8" xml:space="preserve">',
                '<line fill="none" stroke="#000000" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" x1="12.1" y1="8.2" x2="29" y2="25.1"/>',
                '<line fill="none" stroke="#000000" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" x1="12.1" y1="42.1" x2="29" y2="25.1"/>',
                '</svg>'

            ].join('')
        };
    })

'use strict';

angular.module('directives.bindScreenWidth', [])

	.directive('bindScreenWidth', function($rootScope){

        return {

            restrict: 'A',

            link: function(scope, element, attrs){

                function getWidth(){
                    scope.screenWidth = window.innerWidth;
                    if(!$rootScope.$$phase){
                        scope.$apply();
                    }
                };

                getWidth();
                window.onresize = getWidth;
            }
        }
    });

'use strict';

angular.module('directives.fullFrame', [])

	.directive('fullFrame', function($rootScope){

        return {

            restrict: 'A',

			scope: {
				noCrop: '='
			},

            link: function(scope, element, attrs){

                var parent = element.parent();

                var style = function(){

                    var parentHeight =  parent[0].offsetHeight,
                        parentWidth =  parent[0].offsetWidth,
                        elementHeight =  element[0].offsetHeight,
                        elementWidth =  element[0].offsetWidth;

                    element.css({
                        position: 'absolute',
                        top: '50%',
                        left: '50%',
                        transform: 'translate(-50%, -50%)'
                    });

                    parent.css({
                        overflow: 'hidden'
                    });

					if(!scope.noCrop){
	                    if( (parentWidth / parentHeight) > (elementWidth / elementHeight) ){
	                        element.css({
	                            width: parentWidth + 'px',
	                            height: ''
	                        });
	                    }else{
	                        element.css({
	                            height: parentHeight + 'px',
	                            width: ''
	                        });
	                    }
					}
					else{
						if( (parentWidth / parentHeight) <= (elementWidth / elementHeight) ){
	                        element.css({
	                            width: parentWidth + 'px',
	                            height: ''
	                        });
	                    }else{
	                        element.css({
	                            height: parentHeight + 'px',
	                            width: ''
	                        });
	                    }
					}
                };

                style();

                element.on('load', style);
                angular.element(window).on('resize', style);

				$rootScope.$on('FULL_FRAME_RESIZE', style);

				element.on('$destroy', function(){
					angular.element(window).off('resize', style);
				});

            }
        }
    });

'use strict';

angular.module('directives.gallery', [])
    .directive('gallery', function($rootScope){

        return {

            restrict: 'E',

            scope: {
                nbCol: '@galleryNbCol',
                margin: '@galleryColMargin',
                width: '@galleryColWidth',
                isThumbnailsOpen: '='
            },

            transclude: true,

            template: '<div ng-transclude></div>',

            link: function(scope, gallery, attrs){

                var parseValues = function(){
                    scope.nbCol = parseInt(scope.nbCol);
                    scope.margin = parseInt(scope.margin);
                    scope.width = parseInt(scope.width);
                };

                var setStyle = function(){
                    gallery.css({
                        position: 'absolute',
                        top: '50%',
                        left: '50%',
                        width: scope.nbCol * (scope.width + scope.margin) + 'px',
                        transform: 'translate(-50%, -50%)'
                    });
                };

                var emitChange = function(){
                    parseValues();
                    setStyle();
                    // $rootScope.$emit('GALLERY_RESTART');
                    $rootScope.$emit('GALLERY_VALUE_CHANGE');
                };

                parseValues();
                setStyle();

                scope.$watch('galleryNbCol', emitChange);
                scope.$watch('galleryColMargin', emitChange);
                scope.$watch('galleryColWidth', emitChange);

                window.addEventListener('resize', emitChange);

            },

            controller: function($scope, $state){
                var elements = [];

                // recupère la position en x en fonction de index de l'element modulo le nombre de colone
                var getX = function(index){
                    return (index % $scope.nbCol) * $scope.width + (index % $scope.nbCol) * $scope.margin;
                };

                // recupère la position en y en fonction de la hauteur additionnée de tous les elements de la colone
                var getY = function(index){
                    var y = 0;
                    var addPreviousElementHeight = function(i){
                        if(elements[i - $scope.nbCol]){
                            var previousElement = elements[i - $scope.nbCol][0];
                            y += previousElement.offsetHeight + $scope.margin;
                            addPreviousElementHeight(i - $scope.nbCol);
                        }
                    };
                    addPreviousElementHeight(index);
                    return y;
                };

                this.getPosition = function(element){
                    var index = elements.indexOf(element);

                    if(index === -1)
                        index = elements.push(element) - 1; // push renvoi la length du tableau après ajout

                    var position = {};

                    position.x = getX(index);
                    position.y = getY(index);
                    position.width = $scope.width;

                    return position;
                };

                this.removeElement = function(element){
                    var index = elements.indexOf(element);
                    if(index !== -1)
                        elements.splice(index, 1);
                };

                this.closeThumbnails = function(callback){
                    if ($scope.isThumbnailsOpen) {

                        $scope.isThumbnailsOpen = false;

                        TweenMax.set('#galerieContainer .text', {opacity: 0});

                        TweenMax.staggerTo(elements, .7, {
                            width: 0,
                            ease: Power4.easeInOut
                        }, .1, callback);
                    }
                };

                this.openThumbnails = function(callback){
                    if (!$scope.isThumbnailsOpen) {

                        $scope.isThumbnailsOpen = true;

                        TweenMax.set('#galerieContainer .text', {opacity: 1});

                        TweenMax.staggerTo(elements, .7, {
                            width: $scope.width,
                            ease: Power4.easeInOut
                        }, .1, callback);
                    }
                };

                this.restart = function(){
                    elements = [];
                };

                var that = this;

                $rootScope.$on('$stateChangeSuccess', function($event, state, lastState){
                    if(state.name === 'galerie'){
                        that.openThumbnails();
                    }
                });

                $rootScope.$on('GALLERY_RESTART', this.restart);
            }
        };
    })
    .directive('galleryElement', function($rootScope){

        return {

            restrict: 'A',

            require: '^gallery',

            link: function(scope, element, attrs, galleryCtrl){


                var setPosition = function(){
                    var position = galleryCtrl.getPosition(element);

                    element.css({
                        position: 'absolute',
                        width: position.width + 'px',
                        left: position.x + 'px',
                        top: position.y + 'px'
                    });
                };

                setPosition();

                $rootScope.$on('GALLERY_VALUE_CHANGE', setPosition);

                element.on('mouseenter', function(e){
                    var infoDateElement = document.querySelector('.TlInfos-date');

                    var dateUp = new countUp(
                        infoDateElement,
                        infoDateElement.innerHTML,
                        scope.post.date,
                        0,
                        .2,
                        {
                            separator: false
                        }
                    );

                    dateUp.start();
                });

                element.on('$destroy', function(){
                    galleryCtrl.removeElement(element);
                });
            }
        }
    })
    .directive('galleryOpenOnClick', function($state){

        return {

            restrict: 'A',

            require: '^gallery',

            link: function(scope, element, attrs, galleryCtrl){

                element.on('click', function(){
                    galleryCtrl.closeThumbnails(function(){
                        $state.go('galerie.single', {slug: attrs.galleryOpenOnClick});
                    });
                });
            }
        };
    });

'use strict';

angular.module('directives.menu', [
    'ui.router'
])
    .directive('menu', function(){

        return {

            restrict: 'E',

            link: function(scope, element, attrs){

            }
        };
    })
    .directive('tab', function($rootScope, $state, Api){

        return {

            restrict: 'E',

            link: function(scope, element, attrs){

                function onStateChange(event, toState){
                    if($state.includes(attrs.stateRef)){
                        element[0].classList.add('active');
                    }else{
                        element[0].classList.remove('active');
                    }
                }

                function onLanguageChange(){

                }

                $rootScope.$on('$stateChangeSuccess', onStateChange);


                element.on('$destroy', function(){
                    $rootScope.$on('$stateChangeSuccess', onStateChange);
                });



            }
        };

    });

'use strict';

angular.module('directives.onWheel', [])
    .directive('onWheel', function(){



        return {

            restrict: 'A',

            link: function(scope, element, attrs){

                var onWheel = function(e){
                    var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
                    if(delta < 0){
                        scope.$apply(function(){
                            scope.$eval(attrs.down);
                        });
                    }
                    else{
                        scope.$apply(function(){
                            scope.$eval(attrs.up);
                        });
                    }
                };

                var onKeydown = function(e){
                    switch(e.which){
                        case 38 :
                            scope.$apply(function(){
                                scope.$eval(attrs.up);
                            });
                            break;

                        case 40 :
                            scope.$apply(function(){
                                scope.$eval(attrs.down);
                            });
                            break;
                    }
                };




                element.on('mousewheel', onWheel);
                element.on('DOMMouseScroll', onWheel);
                angular.element(window).on('keydown', onKeydown);

                element.on('$destroy', function(){
                    angular.element(window).off('keydown', onKeydown);
                    element.off('mousewheel', onWheel);
                    element.off('wheel', onWheel);
                });
            }
        };
    });

'use strict';

angular.module('directives.relativeMaxHeight', [])
	
	.directive('relativeMaxHeight', function(){

        return {

            restrict: 'A',

            link: function(scope, element, attrs){

                var style = function(){
                    element[0].style.maxHeight = window.innerHeight - attrs.relativeMaxHeight + 'px';
                };

                style();
                window.addEventListener('resize', style);                

            }
        }
    });
'use strict';

angular.module('directives.slider', [
        'directives.onWheel',
        'directives.fullFrame',
        'directives.arrows',
        'filters.index'
    ])
    .directive('slider', function() {

        return {

            restrict: 'E',

            scope: {
                sliderFullscreen: '=',
                pictures: '=',
                noCrop: '='
            },

            template: [

                '<div',
                '   class="Slider"',
                '   data-on-wheel',
                '   data-up="prev()"',
                '   data-down="next()"',
                '>',
                '   <nav>',
                '       <div ng-if="currentIndex !== 0" class="Slider-arrow left" ng-click="prev()"></div>',
                '       <div ng-if="currentIndex !== pictures.length - 1" class="Slider-arrow right" ng-click="next()"></div>',
                '   </nav>',
                '    <slider-image class="Slider-image" ng-repeat="picture in pictures | index:currentIndex"></slider-image>',
                '    <slider-count class="Slider-count"></slider-count>', //{{ currentIndex + 1 + \' / \' + pictures.length}}
                '</div>'

            ].join(''),

            link: function(scope, element, attrs){

                scope.arrowsColor = '#353535';

                var nextPrevOnArrowKeyDown = function(e){
                    switch (e.which) {
                        case 37 : // keyleft
                            scope.$apply(function(){
                                scope.prev();
                            });
                            break;

                        case 39 : // keyright
                            scope.$apply(function(){
                                scope.next();
                            });
                            break;

                        case 27 : // escape
                            history.back();
                            break;
                    }
                };

                window.addEventListener('keydown', nextPrevOnArrowKeyDown, false);

                element.on('$destroy', function(){
                    window.removeEventListener('keydown', nextPrevOnArrowKeyDown, false);
                });

            },

            controller: function($scope, $rootScope) {

                var preloadNextImage = function(){
                    var nextPicture = $scope.pictures[$scope.currentIndex + 1];
                    if(nextPicture){
                        var nextImage = document.createElement('img');
                        nextImage.setAttribute('src', nextPicture.sizes.large);
                    }
                };

                $scope.currentIndex = 0;
                preloadNextImage();

                $scope.next = function() {
                    if($scope.currentIndex + 1 >= $scope.pictures.length)
                        return;

                    $rootScope.$emit('SLIDER_DIRECTION_CHANGE', 'next');

                    $scope.currentIndex += 1;
                    preloadNextImage();
                };

                $scope.prev = function() {
                    if($scope.currentIndex === 0)
                        return;

                    $rootScope.$emit('SLIDER_DIRECTION_CHANGE', 'prev');

                    $scope.currentIndex -= 1;
                    preloadNextImage();
                };


            }
        };
    })
    .directive('sliderImage', function() {

        return {

            restrict: 'E',

            template: [
                '<img full-frame no-crop="noCrop" ng-src="{{picture.sizes.large}}"/>',
            ].join(),

            link: function(scope, element, attrs) {

                var img = element[0].querySelector('img');

                TweenMax.set(img, {
                    opacity: 0
                });

                img.addEventListener('load', function(){
                    TweenMax.to(img, .2, {
                        opacity: 1
                    });
                });
            }
        }
    })
    .directive('sliderCount', function() {

        return {

            restrict: 'E',

            template: '<span class="Slider-count-progress"></span>',

            link: function (scope, element, attrs) {


                var style = function(){
                    var progress = (scope.currentIndex + 1) * 100 / scope.pictures.length;
                    element[0].querySelector('.Slider-count-progress').style.width = progress + '%';
                };

                style();

                scope.$watch('currentIndex', style);
            }
        }

    })
    .animation('.Slider-image', function($rootScope){

        var _currentDirection = 'next';
        var leavingImages = 0;

        $rootScope.$on('SLIDER_DIRECTION_CHANGE', function($event, direction){
            _currentDirection = direction;
        });

        return {

            enter: function(element, done){
                if(_currentDirection === 'next'){
                    TweenMax.from(element, 1.2, {
                        scale: .8,
                        delay: .1,
                        ease: Power3.easeOut,
                        onComplete: done
                    });
                }
                else{
                    TweenMax.from(element, .8, {
                        x: - (element[0].clientWidth + 300),
                        ease: Power2.easeOut,
                        onComplete: done
                    });
                }
            },

            leave: function(element, done){

                if(_currentDirection === 'next'){
                    TweenMax.to(element, 1.2, {
                        x: - (element[0].clientWidth + 300),
                        ease: Power2.easeOut,
                        onComplete: done
                    });
                }
                else{
                    leavingImages += 1;
                    element.css('z-index', leavingImages);
                    TweenMax.to(element, .8, {
                        scale: .8,
                        ease: Power3.easeOut,
                        onComplete: function(){
                            done();
                            leavingImages -= 1;
                        }
                    });
                }
            }
        }
    });

'use strict';

angular.module('directives.textClip', [])
    .directive('textClip', function(){

        return {

            restrict: 'E',

            scope: {
                imageUrl: '@',
                content: '@',
                textSize: '@',
                imageWidth: '@',
                imageHeight: '@',
            },

            templateUrl: 'common/directives/partials/textClip.html',

            link: function(scope, element, attrs){

            }
        };
    })
    .directive('ngY', function (){

        return {

            restrict: 'A',

            scope: {
                ngY: '='
            },

            link: function(scope, element, attrs){
                scope.$watch('ngY', function(newValue){
                    if(newValue){
                        element[0].setAttribute('y', newValue);
                    }else{
                        element[0].setAttribute('y', 0);
                    }
                });
            }
        }
    })

'use strict';

angular.module('directives.timeline', [])
    .directive('timeline', function($rootScope){

        return {

            restrict: 'E',

            scope: {
                frameCount: '=',
                dragDown: '&',
                dragUp: '&'
            },

            link: function(scope, element, attrs){

                var generateTimeline = function(){

                    (function(){
                        var timeline = document.createElement('div'),
                            pointPerFrame = Math.round(window.innerHeight / 13),
                            section,
                            point;

                        timeline.classList.add('pointsContainer');

                        for(var j = 0 ; j < scope.frameCount - 1 ; j++){

                            section = document.createElement('div');
                            section.classList.add('section');

                            for(var i = 0; i < pointPerFrame ; i ++){
                                point = document.createElement('div');
                                point.classList.add('point');
                                if(i === pointPerFrame-1)
                                    point.classList.add('big');
                                section.appendChild(point);
                            }

                            timeline.appendChild(section);
                        }

                        element.html('');
                        element.append(timeline);
                    })();


                    // SCROLL EVENT RESPONSE SETUP
                    var scroll = -.5,
                        scrollMin = -.5,
                        scrollMax = scope.frameCount - .5;


                    var pointsContainer = element[0].querySelector('.pointsContainer');
                    var bigPoints = pointsContainer.querySelectorAll('.big');

                    TweenMax.set(pointsContainer, {y: - window.innerHeight * scroll});

                    // Scroll down event
                    $rootScope.$on('TIMELINE_SCROLL_DOWN', function(e){
                        if(scroll + 1 < scrollMax)
                            scroll += 1;
                        animate();
                    });
                    // Scroll up event
                    $rootScope.$on('TIMELINE_SCROLL_UP', function(e){
                        if(scroll > scrollMin)
                            scroll -= 1;
                        animate();
                    });

                    var animate = function(){
                        TweenMax.set(bigPoints, {width: '', height: ''});

                        var tl = new TimelineLite();
                        tl.to(pointsContainer, 2, {
                            y: - window.innerHeight * scroll,
                            ease: Power3.easeOut
                        });
                        if(bigPoints[scroll -.5]){
                            tl.to(bigPoints[scroll -.5], .3, {
                                y: - 1,
                                height: 10,
                                width: 10,
                                ease: Back.easeOut,
                                easeParams: [4]
                            });
                        }
                    };

                    // DragNDrop
                    var startYPos,
                        endYPos;

                    var drag = function(e){
                        TweenMax.set(pointsContainer, {y: - window.innerHeight * scroll + (e.clientY - startYPos)});
                    };

                    var onMouseDown = function(e){
                        e.preventDefault();
                        e.stopPropagation();

                        startYPos = e.clientY;

                        document.body.classList.add('grabbing');

                        document.addEventListener('mousemove', drag, false);
                        document.addEventListener('mouseup', onMouseUp, false);
                    };

                    var onMouseUp = function(e){
                        e.preventDefault();
                        e.stopPropagation();

                        endYPos = e.clientY;

                        document.body.classList.remove('grabbing');

                        var diff = startYPos - endYPos;

                        if(!!attrs.dragDown && diff >= 200 && scroll + 1 < scrollMax){ // dépalcement de la timeline vers le haut
                            scope.$apply(function(){
                                scope.$eval(scope.dragDown);
                            });
                        }
                        else if(!!attrs.dragUp && diff <= -200 && scroll > scrollMin){ // dépalcement de la timeline vers le bas
                            scope.$apply(function(){
                                scope.$eval(scope.dragUp);
                            });
                        }
                        else {
                            TweenMax.to(pointsContainer, 2, {
                                y: - window.innerHeight * scroll,
                                ease: Power3.easeOut
                            });
                        }

                        document.removeEventListener('mousemove', drag, false);
                        document.removeEventListener('mouseup', onMouseUp, false);
                    };

                    document.addEventListener('mousedown', onMouseDown);


                    element.on('$destroy', function(){
                        document.removeEventListener('mousedown', onMouseDown);
                    });
                };

                generateTimeline();
                window.addEventListener('resize', function(){
                    generateTimeline();
                });
                scope.$watch('frameCount', generateTimeline);



            }
        };
    });

'use strict';

angular.module('directives.windowHeight', [])

	.directive('windowHeight', function(){

        return {

            restrict: 'A',

            scope: {
                ratio: '=windowHeight'
            },

            link: function(scope, element, attrs){

                var style = function(){
                    element[0].style.minHeight = window.innerHeight * scope.ratio + 'px';
                };

                style();
                window.addEventListener('resize', style);

            }
        }
    });

'use strict';

angular.module('directives.zigouigoui', [])
    .directive('zigouigoui', function() {


        var getAnimation = function(fillPaths, strokePaths, duration){
            TweenMax.set(fillPaths, {
                opacity: 0
            });

            var tl = new TimelineMax({paused: true});

            angular.forEach(strokePaths, function(path) {
                var length = path.getTotalLength(),
                    strokeWidth = path.getAttribute("stroke-width");

                path.style.strokeDasharray = (length)+" "+(length);
                path.style.strokeDashoffset = (/Firefox/i.test(navigator.userAgent))? length/strokeWidth : length;

                tl.to(path.style, duration, {
                    strokeDashoffset: 0,
                    delay: -.5
                });
            });

            tl.to(fillPaths, 1.2, {
                opacity: 1,
                delay: -.5
            });

            return tl;
        };

        return {

            restrict: 'E',

            scope: {
                color: '@',
                noAnimation: '=',
                noDelay: '=',
                animationDuration: '='
            },

            template: [

                '<svg style="max-width:100px; max-height:100px" enable-background="new 0 0 92.7 35" id="Calque_1" version="1.1" viewBox="0 0 92.7 35" x="0px" xml:space="preserve" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" y="0px">',

                '    <path',
                '       class="stroke"',
                '       d="M69.1,7.6c-7-2.1-16.6,0.2-23.6,2.5 c-6.1,2.1-13.4,6.1-19.3,9.7c-5.4,3.2-16.7,6.4-20.4-1c0,0,0-0.1-0.1-0.1c-0.1-0.2-0.2-0.4-0.2-0.6c0-0.1,0-0.1,0-0.1',
                '       c-0.3-1.2-0.1-2.9,0.5-3.9c0.6-1.1,1.7-2.3,2.9-2.7c0.6-0.2,1.6-0.6,3.5-0.4c0,0,2.5,0.1,2.9,2.7l0,0.5c-0.5-0.5-1.1-0.8-1.9-0.9 c-1.6-0.1-2.9,1.1-3,2.7c0,0.4,0.1,0.8,0.2,1.2c0.2,0.6,0.7,1.1,1.3,1.5c0,0,0.1,0,0.1,0.1c0.8,0.3,1.7,0.5,2.7,0.3',
                '       c2-0.3,3.3-1.3,3.6-3.1c0-0.2,0.1-0.4,0.1-0.6c0-0.1,0.2-2.1-1-3.4c-0.2-0.2-2-2.4-6.7-1.8c-4.3,0.6-5.6,3.9-6,5.4 c-0.2,0.6-0.8,3.3,1.2,6.2c2.1,2.9,5,3.7,6.4,4c4.4,0.9,9.2,0.5,13.3-1.4c4.5-2.1,8.5-5.6,12.5-8c2.6-1.5,8.1-5.1,12.1-6.4',
                '       C56.2,8.2,61.4,6,67.5,7.2" fill="none" stroke-miterlimit="10" stroke-width="1" stroke="{{color}}"/>',

                '    <path',
                '       class="stroke"',
                '        d="M23.4,28.4c7,2.1,16.6-0.2,23.6-2.5 c6.1-2.1,13.4-6.1,19.3-9.7c5.4-3.2,16.7-6.4,20.4,1c0,0,0,0.1,0.1,0.1c0.1,0.2,0.2,0.4,0.2,0.6c0,0.1,0,0.1,0,0.1',
                '        c0.3,1.2,0.1,2.9-0.5,3.9c-0.6,1.1-1.7,2.3-2.9,2.7c-0.6,0.2-1.6,0.6-3.5,0.4c0,0-2.5-0.1-2.9-2.7l0-0.5c0.5,0.5,1.1,0.8,1.9,0.9 c1.6,0.1,2.9-1.1,3-2.7c0-0.4-0.1-0.8-0.2-1.2c-0.2-0.6-0.7-1.1-1.3-1.5c0,0-0.1,0-0.1-0.1c-0.8-0.3-1.7-0.5-2.7-0.3',
                '        c-2,0.3-3.3,1.3-3.6,3.1c0,0.2-0.1,0.4-0.1,0.6c0,0.1-0.2,2.1,1,3.4c0.2,0.2,2,2.4,6.7,1.8c4.3-0.6,5.6-3.9,6-5.4 c0.2-0.6,0.8-3.3-1.2-6.2c-2.1-2.9-5-3.7-6.4-4c-4.4-0.9-9.2-0.5-13.3,1.4c-4.5,2.1-8.5,5.6-12.5,8c-2.6,1.5-8.1,5.1-12.1,6.4',
                '        c-6.1,1.9-11.3,4.1-17.4,2.9" fill="none" stroke-miterlimit="10" stroke-width="1" stroke="{{color}}"/>',

                '    <path',
                '       class="fill"',
                '        d="M69.1,7.6c-7-2.1-16.6,0.2-23.6,2.5c-6.1,2.1-13.4,6.1-19.3,9.7c-5.4,3.2-16.7,6.4-20.4-1c0,0,0-0.1-0.1-0.1 c-0.1-0.2-0.2-0.4-0.2-0.6c0-0.1,0-0.1,0-0.1c-0.3-1.2-0.1-2.9,0.5-3.9c0.6-1.1,1.7-2.3,2.9-2.7c0.6-0.2,1.6-0.6,3.5-0.4',
                '        c0,0,2.5,0.1,2.9,2.7l0,0.5c-0.5-0.5-1.1-0.8-1.9-0.9c-1.6-0.1-2.9,1.1-3,2.7c0,0.4,0.1,0.8,0.2,1.2c0.2,0.6,0.7,1.1,1.3,1.5 c0,0,0.1,0,0.1,0.1c0.8,0.3,1.7,0.5,2.7,0.3c2-0.3,3.3-1.3,3.6-3.1c0-0.2,0.1-0.4,0.1-0.6c0-0.1,0.2-2.1-1-3.4',
                '        c-0.2-0.2-2-2.4-6.7-1.8c-4.3,0.6-5.6,3.9-6,5.4c-0.2,0.6-0.8,3.3,1.2,6.2c2.1,2.9,5,3.7,6.4,4c4.4,0.9,9.2,0.5,13.3-1.4 c4.5-2.1,8.5-5.6,12.5-8c2.6-1.5,8.1-5.1,12.1-6.4C56.2,8.2,61.4,6,67.5,7.2" fill="{{color}}" stroke-width="0"/>',

                '    <path',
                '       class="fill"',
                '        d="M23.4,28.4c7,2.1,16.6-0.2,23.6-2.5c6.1-2.1,13.4-6.1,19.3-9.7c5.4-3.2,16.7-6.4,20.4,1c0,0,0,0.1,0.1,0.1 c0.1,0.2,0.2,0.4,0.2,0.6c0,0.1,0,0.1,0,0.1c0.3,1.2,0.1,2.9-0.5,3.9c-0.6,1.1-1.7,2.3-2.9,2.7c-0.6,0.2-1.6,0.6-3.5,0.4',
                '        c0,0-2.5-0.1-2.9-2.7l0-0.5c0.5,0.5,1.1,0.8,1.9,0.9c1.6,0.1,2.9-1.1,3-2.7c0-0.4-0.1-0.8-0.2-1.2c-0.2-0.6-0.7-1.1-1.3-1.5 c0,0-0.1,0-0.1-0.1c-0.8-0.3-1.7-0.5-2.7-0.3c-2,0.3-3.3,1.3-3.6,3.1c0,0.2-0.1,0.4-0.1,0.6c0,0.1-0.2,2.1,1,3.4',
                '        c0.2,0.2,2,2.4,6.7,1.8c4.3-0.6,5.6-3.9,6-5.4c0.2-0.6,0.8-3.3-1.2-6.2c-2.1-2.9-5-3.7-6.4-4c-4.4-0.9-9.2-0.5-13.3,1.4 c-4.5,2.1-8.5,5.6-12.5,8c-2.6,1.5-8.1,5.1-12.1,6.4c-6.1,1.9-11.3,4.1-17.4,2.9" fill="{{color}}" stroke-width="0"/>',
                '</svg>'

            ].join(''),

            link: function(scope, element, attrs) {

                var fillPaths = element[0].querySelectorAll('.fill'),
                    strokePaths = element[0].querySelectorAll('.stroke');

                if (!scope.color) {
                    scope.color = '#525151';
                }

                if (!scope.noAnimation){
                    var tl = getAnimation(fillPaths, strokePaths, scope.animationDuration || 1.7);

                    if(scope.noDelay) {
                        tl.restart();
                    }
                    else {
                        setTimeout(function(){
                            tl.restart();
                        }, 1500);
                    }
                }
            }
        };
    });

'use strict';
angular.module('filters.index', [])
    .filter('index', function(){

        return function(array, index){

            return [array[index]];

        }

    });

'use strict';
angular.module('filters.slice', [])
    .filter('slice', function() {
        return function(arr, step, current) {
            var start = step * current,
                end = start + step;

            return arr.slice(start, end);
        };
    });

'use strict';

angular.module('services.Api', [
        'Constants'
    ])
    .factory('Api', function($q, $http, SERVER) {
        // Service logic

        var _data = {
            histoire: false,
            savoirFaire: false,
            realisations: false,
            conferences: false,
            formations: false,
            clients: false,
            partners: false
        };

        var _language = 'fr';

        var _fakeData = false;

        // Public API here
        var Api = {


            setLanguage: function(language){
                switch (language){
                    case 'fr':
                        _language = 'fr';
                        break;

                    case 'en':
                        _language = 'en';
                        break;
                }
            },

            getLanguage: function(){
                return _language;
            },

            getHistoire: function(reload){

                var deferred = $q.defer(),
                    histoire = [];

                if(!_data.histoire || reload){

                    $http.get(_fakeData ? 'data/histoire.json' : SERVER.API + '/posts?type=histoire')
                        .success(function(data){


                            angular.forEach(data, function(story){
                                histoire.push({
                                    slug: story.slug,
                                    name: story.meta.name,
                                    date: story.meta.date,
                                    image: story.meta.image,
                                    lieu: (_language === 'fr') ? story.lieu : story.meta.en_lieu,
                                    title: (_language === 'fr') ? story.title : story.meta.en_title,
                                    content: (_language === 'fr') ? story.meta.content : story.meta.en_content,
                                    baseline: (_language === 'fr') ? story.meta.baseline : story.meta.en_baseline
                                });
                            });


                            _data.histoire = histoire;
                            deferred.resolve(histoire);
                        })
                        .error(function(data, status){
                            deferred.reject(data);
                        });
                }else{
                    deferred.resolve(_data.histoire);
                }

                return deferred.promise;
            },

            getSavoirFaire: function(reload){
                var deferred = $q.defer(),
                    savoirFaire = [];

                if(!_data.savoirFaire || reload){

                    $http.get(_fakeData ? 'data/savoir-faire.json' : SERVER.API + '/posts?type=savoir_faire')
                        .success(function(data){


                            angular.forEach(data, function(savoir){
                                savoirFaire.push({
                                    slug: savoir.slug,
                                    image: savoir.meta.image,
                                    column: savoir.meta.column,
                                    title: (_language === 'fr') ? savoir.title : savoir.meta.en_title,
                                    content: (_language === 'fr') ? savoir.meta.content : savoir.meta.en_content,
                                    baseline: (_language === 'fr') ? savoir.meta.baseline : savoir.meta.en_baseline
                                });
                            });

                            _data.savoirFaire = savoirFaire;
                            deferred.resolve(savoirFaire);
                        })
                        .error(function (data, status){
                            deferred.reject(data);
                        });
                }else{
                    deferred.resolve(_data.savoirFaire);
                }

                return deferred.promise;
            },

            getRealisations: function(reload){
                var deferred = $q.defer(),
                    realisations = [];

                if(!_data.realisations || reload){

                    $http.get(_fakeData ? 'data/realisations.json' : SERVER.API + '/posts?type=realisations')
                        .success(function(data){


                            angular.forEach(data, function(realisation){
                                realisations.push({
                                    slug: realisation.slug,
                                    date: realisation.meta.date,
                                    pictures: realisation.meta.pictures,
                                    cover: realisation.meta.cover,
                                    bookBinder: realisation.meta.book_binder,
                                    bookBinderUrl: realisation.meta.book_binder_url,
                                    title: (_language === 'fr') ? realisation.title : realisation.meta.en_title,
                                    baseline: (_language === 'fr') ? realisation.meta.baseline : realisation.meta.en_baseline,
                                    description: (_language === 'fr') ? realisation.meta.description : realisation.meta.en_description
                                });
                            });


                            realisations.sort(function(a, b){
                                return b.date - a.date;
                            });

                            _data.realisations = realisations;
                            deferred.resolve(realisations);
                        })
                        .error(function (data, status){
                            deferred.reject(data);
                        });
                }else{
                    deferred.resolve(_data.realisations);
                }

                return deferred.promise;
            },

            getConferences: function(reload){
                var deferred = $q.defer(),
                    conferences = [];

                if(!_data.conferences || reload){

                    $http.get(_fakeData ? 'data/conferences.json' : SERVER.API + '/posts?type=conference')
                        .success(function(data){


                            angular.forEach(data, function(conference){
                                conferences.push({
                                    slug: conference.slug,
                                    image: conference.meta.image,
                                    title: (_language === 'fr') ? conference.title : conference.meta.en_title,
                                    description: (_language === 'fr') ? conference.meta.description : conference.meta.en_description,
                                    level: (_language === 'fr') ? conference.meta.level : conference.meta.en_level,
                                    duree: (_language === 'fr') ? conference.meta.duree : conference.meta.en_duree
                                });
                            });


                            _data.conferences = conferences;
                            deferred.resolve(conferences);
                        })
                        .error(function (data, status){
                            deferred.reject(data);
                        });
                }else{
                    deferred.resolve(_data.conferences);
                }

                return deferred.promise;
            },

            getFormations: function(reload){
                var deferred = $q.defer(),
                    formations = [];

                if(!_data.formations || reload){

                    $http.get(_fakeData ? 'data/formations.json' : SERVER.API + '/posts?type=formation')
                        .success(function(data){


                            angular.forEach(data, function(formation){
                                formations.push({
                                    slug: formation.slug,
                                    image: formation.meta.image,
                                    title: (_language === 'fr') ? formation.title : formation.meta.en_title,
                                    description: (_language === 'fr') ? formation.meta.description : formation.meta.en_description,
                                    level: (_language === 'fr') ? formation.meta.level : formation.meta.en_level,
                                    duree: (_language === 'fr') ? formation.meta.duree : formation.meta.en_duree
                                });
                            });


                            _data.formations = formations;
                            deferred.resolve(formations);
                        })
                        .error(function (data, status){
                            deferred.reject(data);
                        });
                }else{
                    deferred.resolve(_data.formations);
                }

                return deferred.promise;
            },


            getClients: function(reload){
                var deferred = $q.defer(),
                    clients = [];

                if(!_data.clients || reload){

                    $http.get(_fakeData ? 'data/clients.json' : SERVER.API + '/posts?type=clients')
                        .success(function(data){


                            angular.forEach(data, function(client){
                                clients.push({
                                    slug: client.slug,
                                    category: client.meta.category,
                                    name: (_language === 'fr') ? client.meta.name : client.meta.en_name
                                });
                            });


                            _data.clients = clients;
                            deferred.resolve(clients);
                        })
                        .error(function (data, status){
                            deferred.reject(data);
                        });
                }else{
                    deferred.resolve(_data.clients);
                }

                return deferred.promise;
            },

            getPartners: function(reload){
                var deferred = $q.defer(),
                    partners = [];

                if(!_data.partners || reload){

                    $http.get(_fakeData ? 'data/partners.json' : SERVER.API + '/posts?type=partners')
                        .success(function(data){


                            angular.forEach(data, function(client){
                                partners.push({
                                    link: client.meta.link,
                                    name: (_language === 'fr') ? client.title : client.meta.en_title
                                });
                            });


                            _data.partners = partners;
                            deferred.resolve(partners);
                        })
                        .error(function (data, status){
                            deferred.reject(data);
                        });
                }else{
                    deferred.resolve(_data.partners);
                }

                return deferred.promise;
            },


            getAll: function(reload){

                var deferred = $q.defer();

                $q.all([
                    this.getHistoire(reload),
                    this.getSavoirFaire(reload),
                    this.getRealisations(reload),
                    this.getFormations(reload),
                    this.getConferences(reload),
                    this.getClients(reload),
                    this.getPartners(reload),
                ]).then(function(){
                    deferred.resolve(_data);
                });

                return deferred.promise;
            }

        };

        return Api;
    });
